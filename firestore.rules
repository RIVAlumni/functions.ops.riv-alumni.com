rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Enforce a global whitelist-only rule on all documents.
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{docId} {
      // Allow GET, if the document belongs to the authenticated user.
      allow get:  if isAuthenticated()
                  && request.auth.uid == docId;

      // Allow GET, if the authenticated user has an access level of 2 or more.
      allow get:  if isAuthenticated()
                  && getAccessLevel() >= 2;

      // Allow LIST, if the authenticated user has an access level of 2 or more,
      // and the request limit <= QUERY_LIMIT.
      // Refer to function QUERY_LIMIT.
      allow list: if isAuthenticated()
                  && getAccessLevel() >= 2
                  && request.query.limit <= QUERY_LIMIT();

      // Allow UPDATE, if
      // * the user is authenticated;
      // * the user has an access level of 3 or more;
      // * the update request only has the field `Access Level`;
      // * the field value `Access Level` is the data type of int;
      // * the request field `Access Level` is lower than the resource field;
      allow update: if isAuthenticated()
                    && getAccessLevel() >= 3
                    && getIncomingData().keys().hasOnly([
                      'User ID',
                      'Email',
                      'Photo URL',
                      'Display Name',
                      'Membership ID',
                      'Access Level',
                      'updatedAt',
                      'createdAt'
                    ])
                    && getIncomingData()['User ID'] is string
                    && getIncomingData()['Email'] is string
                    && getIncomingData()['Photo URL'] is string
                    && getIncomingData()['Display Name'] is string
                    && (getIncomingData()['Membership ID'] is string
                    || getIncomingData()['Membership ID'] == null)
                    && getIncomingData()['Access Level'] is int
                    && getIncomingData()['updatedAt'] is timestamp
                    && getIncomingData()['createdAt'] is timestamp
                    && getIncomingData()['User ID'] == getExistingData()['User ID']
                    && getIncomingData()['Email'] == getExistingData()['Email']
                    && getIncomingData()['Photo URL'] == getExistingData()['Photo URL']
                    && getIncomingData()['Display Name'] == getExistingData()['Display Name']
                    && getIncomingData()['Membership ID'] == getExistingData()['Membership ID']
                    && getIncomingData()['Access Level'] < getExistingData()['Access Level']
                    && getIncomingData()['updatedAt'] == getExistingData()['updatedAt']
                    && getIncomingData()['createdAt'] == getExistingData()['createdAt'];

      // Deny CREATE and DELETE operations; handled by Cloud Functions.
      allow create, delete: if false;
    }

    // NEEDS DOUBLE CHECKING
    // Remarks collection contains all alumni event performance records used
    // for future manpower and participation selection.
    //
    // GET,
    // CREATE,
    // UPDATE   If the authenticated user has an access level of 2 (Editor) or
    //          higher.
    // LIST     If the authenticated user has an access level of 2 (Editor) or
    //          higher and the query limit not exceeding 10 documents at once.
    // DELETE   If the authenticated user has an access level of 3
    //          (Administrator) or higher.
    match /remarks/{remarkId} {
      allow get,
            list,
            create,
            update: if isAuthenticated()
                    && getAccessLevel() >= 2
                    && request.query.limit <= QUERY_LIMIT();

      allow delete: if isAuthenticated()
                    && getAccessLevel() >= 3;
    }

    // Members collection contains all the personal identifiable information of
    // alumni used for identifying an alumnus or contacting emergency contacts.
    //
    // GET      If the document belongs to the authenticated user or the
    //          authenticated user has an access level of 2 (Editor) or higher.
    //
    // LIST     If the authenticated user has an access level of 2 (Editor) or
    //          higher and the query limit not exceeding 10 documents at once.
    //
    // CREATE   If the authenticated user has an access level of 2 (Editor) or
    //          higher.
    //
    // UPDATE   If the document belongs to the authenticated user or the
    //          authenticated user has an access level of 2 (Editor) or higher.
    //          And the locked document data not being modified.
    //
    // DELETE   If the authenticated user has an access level of 3 (Administrator)
    //          or higher.
    match /members/{memberId} {
      allow get:  if isAuthenticated()
                  && getUserData()['Membership ID'] == memberId;

      allow get: if isAuthenticated()
                  && getAccessLevel() >= 2;

      allow list: if isAuthenticated()
                  && getAccessLevel() >= 2
                  && request.query.limit <= QUERY_LIMIT();

      allow create: if isAuthenticated()
                    && getAccessLevel() >= 2;

      allow update: if isAuthenticated()
                    && getAccessLevel() >= 2
                    && getIncomingData()['Membership ID'] == getExistingData()['Membership ID']
                    && getIncomingData()['Graduating Class'] == getExistingData()['Graduating Class']
                    && getIncomingData()['Graduating Year'] == getExistingData()['Graduating Year']
                    && getIncomingData()['updatedAt'] == getExistingData()['updatedAt']
                    && getIncomingData()['createdAt'] == getExistingData()['createdAt'];

      allow delete: if isAuthenticated()
                    && getAccessLevel() >= 3;
    }

    // Events collection contains all the past and upcoming events.
    //
    // GET      If the authenticated user has an access level of 1 (Alumni) or
    //          higher.
    //
    // LIST     If the authenticated user has an access level of 1 (Alumni) or
    //          higher and the query limit not exceeding 10 documents at once.
    //
    // CREATE   If the authenticated user has an access level of 2 (Editor) or
    //          higher.
    //
    // UPDATE   If the authenticated user has an access level of 2 (Editor) or
    //          higher and having the locked document data not being modified.
    //
    // DELETE   If the authenticated user has an access level of 3 (Administrator)
    //          or higher.
    match /events/{eventId} {
      allow get:  if isAuthenticated()
                  && getAccessLevel() >= 1
                  && getUserData()['Membership ID'] != null;

      allow list: if isAuthenticated()
                  && getAccessLevel() >= 1
                  && request.query.limit <= QUERY_LIMIT();

      allow create: if isAuthenticated()
                    && getAccessLevel() >= 2;

      allow update: if isAuthenticated()
                    && getAccessLevel() >= 2
                    && getIncomingData()['Event Code'] == getExistingData()['Event Code']
                    && getIncomingData()['Event Year'] == getExistingData()['Event Year']
                    && getIncomingData()['updatedAt'] == getExistingData()['updatedAt']
                    && getIncomingData()['createdAt'] == getExistingData()['createdAt'];

      allow delete: if isAuthenticated()
                    && getAccessLevel() >= 3;
    }

    // Participations collection contains all records of alumni participation.
    // Used for identifying events participated and collating total VIA hours.
    //
    // GET      If the document belongs to the authenticated user or the
    //          authenticated user has an access level of 2 (Editor) or higher.
    //
    // LIST     If the document belongs to the authenticated user or the
    //          authenticated user has an access level of 2 (Editor) or higher.
    //          And the query limit not exceeding 10 documents at once.
    //
    // CREATE   If the authenticated user has an access level of 2 (Editor) or
    //          higher.
    //
    // UPDATE   If the authenticated user has an access level of 2 (Editor) or
    //          higher and the locked document data not being modified.
    //
    // DELETE   If the authenticated user has an access level of 3 (Administrator)
    //          or higher.
    match /participations/{participationId} {
      allow get:  if isAuthenticated()
                  && getExistingData()['Membership ID'] == getUserData()['Membership ID'];

      allow list: if isAuthenticated()
                  && getExistingData()['Membership ID'] == getUserData()['Membership ID']
                  && request.query.limit <= QUERY_LIMIT();

      allow get:  if isAuthenticated()
                  && getAccessLevel() >= 2;

      allow list: if isAuthenticated()
                  && getAccessLevel() >= 2
                  && request.query.limit <= QUERY_LIMIT();

      allow create: if isAuthenticated()
                    && getAccessLevel() >= 2;

      allow update: if isAuthenticated()
                    && getAccessLevel() >= 2
                    && getIncomingData()['Membership ID'] == getExistingData()['Membership ID']
                    && getIncomingData()['Event Code'] == getExistingData()['Event Code']
                    && getIncomingData()['updatedAt'] == getExistingData()['updatedAt']
                    && getIncomingData()['createdAt'] == getExistingData()['createdAt'];

      allow delete: if isAuthenticated()
                    && getAccessLevel() >= 3;
    }

    match /aggregations/{aggregationId} {
      allow get:  if isAuthenticated()
                  && getAccessLevel() >= 2;

      allow list,
            create,
            update,
            delete: if false;
    }

    // function isUserValid() {
    //   return exists()
    // }

    function isAuthenticated() {
      return request.auth != null;
    }

    function getExistingData() {
      return resource.data;
    }

    function getIncomingData() {
      return request.resource.data;
    }

    function getUserData() {
    	return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getAccessLevel() {
      return getUserData()['Access Level'];
    }

    function QUERY_LIMIT() {
      return 15;
    }
  }
}
