rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    // NEW RULES

    match /users/{userId} {
      // Allow users to get, create and update their own user document.
      allow get,
            create,
            update: if request.auth.uid == userId;

      // Allow users with access level 2 and higher.
      allow get,
            list,
            update: if getAccessLevel() >= 2;

      allow delete: if false;
    }

    match /remarks/{remarkId} {
      // Allow users with access level 2 and higher.
      allow get,
            list,
            create,
            update: if getAccessLevel() >= 2;

      // Allow users with access level 3 and higher.
      allow get,
            list,
            create,
            update,
            delete: if getAccessLevel() >= 3;
    }

    match /members/{memberId} {
      // Allow users to get, and update their membership document.
      allow get,
            update: if getUserData()['Membership ID'] == memberId;

      // Allow users with access level 2 and higher.
      allow get,
            list,
            create,
            update: if getAccessLevel() >= 2;

      // Allow users with access level 3 and higher.
      allow get,
            list,
            create,
            update,
            delete: if getAccessLevel() >= 3;
    }

    match /events/{eventId} {
      // Allow users with access level 1 and higher.
      allow get,
            list: if getAccessLevel() >= 1;

      // Allow users with access level 2 and higher.
      allow get,
            list,
            create,
            update: if getAccessLevel() >= 2;
      
      // Allow users with access level 3 and higher.
      allow get,
            list,
            create,
            update,
            delete: if getAccessLevel() >= 3;
    }

    match /participations/{participationId} {
      // Allow users to get their own participation document.
      allow get: if getExistingData()['Membership ID'] == getUserData()['Membership ID'];

      // Allow users with access level 2 and higher.
      allow get,
            list,
            create,
            update: if getAccessLevel() >= 2;

      // Allow users with access level 3 and higher.
      allow get,
            list,
            create,
            update,
            delete: if getAccessLevel() >= 3;
    }

    // NEW RULES

    match /aggregations/users {
      // Privileged User
      allow get: if getRole('Editor');
      allow get, delete: if getRole('Administrator');
    }

    match /aggregations/members {
      // Privileged User
      allow get: if getRole('Editor');
      allow get, delete: if getRole('Administrator');
    }

    match /aggregations/events {
      // Non-Privileged User
      allow get: if getRole('Alumni');

      // Privileged User
      allow get: if getRole('Editor');
      allow get, delete: if getRole('Administrator');
    }

    match /aggregations/participations {
      // Non-Privileged User
      allow get: if getRole('Alumni');

      // Privileged User
      allow get: if getRole('Editor');
      allow get, delete: if getRole('Administrator');
    }

    function getExistingData() {
      return resource.data;
    }

    function getIncomingData() {
      return request.resource.data;
    }

    function getAccessLevel() {
      return request.auth.token['accessLevel']
    }

    function getUserData() {
    	return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data['Roles'][role]
    }
  }
}
