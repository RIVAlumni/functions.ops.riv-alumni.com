rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Enforce a global whitelist-only rule on all documents.
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{docId} {
      // Allow GET, if the document belongs to the authenticated user.
      allow get:  if isAuthenticated()
                  && request.auth.uid == docId;

      // Allow GET, if the authenticated user has an access level of 2 or more.
      allow get:  if isAuthenticated()
                  && getAccessLevel() >= 2;

      // Allow LIST, if the authenticated user has an access level of 2 or more,
      // and the request limit <= QUERY_LIMIT.
      // Refer to function QUERY_LIMIT.
      allow list: if isAuthenticated()
                  && getAccessLevel() >= 2
                  && isWithinQueryLimit();

      // Allow UPDATE, if
      // * the user is authenticated;
      // * the user has an access level of 3 or more;
      // * the update request only has the field `Access Level`;
      // * the field value `Access Level` is the data type of int;
      // * the request field `Access Level` is lower than the resource field;
      allow update: if isAuthenticated()
                    && getAccessLevel() >= 3
                    && isValidUpdate();

      // Allow CREATE, if
      // * the user is authenticated;
      // * the document belongs to the user;
      // * the document structure matches the data model;
      // * the field `User ID` is of type string;
      // * the field `Email` is of type string;
      // * the field `Photo URL` is of type string;
      // * the field `Display Name` is of type string;
      // * the field `Access Level` is of type int;
      // * the field `updatedAt` is of type timestamp;
      // * the field `createdAt` is of type timestamp;
      //
      // * the field `User ID` == the user uid;
      // * the field `Email` == the user email;
      // * the field `Display Name` == user name;
      // * the field `Membership ID` == null;
      // * the field `Access Level` == 0;
      // * the field `updatedAt` == current timestamp;
      // * the field `createdAt` == current timestamp;
      allow create: if isAuthenticated()
                    && isValidCreate();

      // Deny DELETE operations; handled by Cloud Functions.
      allow delete: if false;

      function isValidUpdate() {
        let affectedKeys = getIncomingData().diff(resource.data).affectedKeys();
        return affectedKeys.hasOnly(['Access Level', 'updatedAt'])
            && getIncomingData()['Access Level'] is int
            && getIncomingData()['updatedAt'] is timestamp
            && getIncomingData()['Access Level'] <= getExistingData()['Access Level']
            && getIncomingData()['updatedAt'].toMillis() == request.time.toMillis();
      }

      function isValidCreate() {
        let authUser = request.auth;
        let allowedKeys = [
          'User ID',
          'Email',
          'Photo URL',
          'Display Name',
          'Membership ID',
          'Access Level',
          'updatedAt',
          'createdAt'
        ];

        return docId == authUser.uid
            && getIncomingData().keys().hasOnly(allowedKeys)
            && getIncomingData()['User ID'] is string
            && getIncomingData()['Email'] is string
            && getIncomingData()['Photo URL'] is string
            && getIncomingData()['Display Name'] is string
            && getIncomingData()['Access Level'] is int
            && getIncomingData()['updatedAt'] is timestamp
            && getIncomingData()['createdAt'] is timestamp
            && getIncomingData()['User ID'] == authUser.uid
            && getIncomingData()['Email'] == authUser.token.email
            && getIncomingData()['Photo URL'] != ''
            && getIncomingData()['Display Name'] == authUser.token.name
            && getIncomingData()['Membership ID'] == null
            && getIncomingData()['Access Level'] == 0
            && getIncomingData()['updatedAt'].toMillis() == request.time.toMillis()
            && getIncomingData()['createdAt'].toMillis() == request.time.toMillis();
      }
    }

    match /members/{memberId} {
      allow get:  if isAuthenticated()
                  && getUserData()['Membership ID'] == memberId;

      allow get:  if isAuthenticated()
                  && hasPermissionLevel(2);

      allow list: if isAuthenticated()
                  && hasPermissionLevel(2)
                  && isWithinQueryLimit();

      allow create: if isAuthenticated()
                    && hasPermissionLevel(2);

      function isValidCreate() {
        let incomingData = getIncomingData();
        let allowedKeys = [
          'Membership ID',
          'Full Name',
          'Gender',
          'Email',
          'Contact Number',
          'Home Number',
          'Current School',
          'Graduating Class',
          'Graduating Year',
          'Name Of Next-Of-Kin',
          'Relationship With Next-Of-Kin',
          'Contact Number Of Next-Of-Kin',
          'updatedAt',
          'createdAt'
        ]

        return incomingData.keys().hasOnly(allowedKeys)
            && incomingData['Membership ID'] is string
            && incomingData['Full Name'] is string
            && incomingData['Gender'] is string
            && (incomingData['Email'] is string
            || incomingData['Email'] == null)
            && incomingData['Contact Number'] is int
            && (incomingData['Home Number'] is int
            || incomingData['Home Number'] == null)
            && (incomingData['Current School'] is string
            || incomingData['Current School'] == null)
            && incomingData['Graduating Class'] is string
            && incomingData['Graduating Year'] is int,
            && incomingData['Name Of Next-Of-Kin'] is string,
            && incomingData['Relationship With Next-Of-Kin'] is string
            && incomingData['Contact Number Of Next-Of-Kin'] is int
            && incomingData['updatedAt'] is timestamp
            && incomingData['createdAt'] is timestamp
            && incomingData['Membership ID'] == memberId
            && isNotEmpty(incomingData['Full Name'])
            && incomingData['Gender'] in ['Male', 'Female']
            && isNotEmpty(incomingData['Email'])
            && isWithinRange(incomingData['Contact Number'], 81000000, 99999999)
            && isWithinRange(incomingData['Home Number'], 81000000, 99999999)
            && isNotEmpty(incomingData['Current School'])
            && isNotEmpty(incomingData['Graduating Class'])
            && isWithinRange(incomingData['Graduating Year'], 2000, request.time.year())
            && isNotEmpty(incomingData['Name Of Next-Of-Kin'])
            && isNotEmpty(incomingData['Relationship With Next-Of-Kin'])
            && isWithinRange(incomingData['Contact Number Of Next-Of-Kin'], 81000000, 99999999)
            && incomingData['updatedAt'].toMillis() == request.time.toMillis()
            && incomingData['createdAt'].toMillis() == request.time.toMillis();
      }
    }

    // Members collection contains all the personal identifiable information of
    // alumni used for identifying an alumnus or contacting emergency contacts.
    //
    // GET      If the document belongs to the authenticated user or the
    //          authenticated user has an access level of 2 (Editor) or higher.
    //
    // LIST     If the authenticated user has an access level of 2 (Editor) or
    //          higher and the query limit not exceeding 10 documents at once.
    //
    // CREATE   If the authenticated user has an access level of 2 (Editor) or
    //          higher.
    //
    // UPDATE   If the document belongs to the authenticated user or the
    //          authenticated user has an access level of 2 (Editor) or higher.
    //          And the locked document data not being modified.
    //
    // DELETE   If the authenticated user has an access level of 3 (Administrator)
    //          or higher.
    match /members/{memberId} {
      allow get:  if isAuthenticated()
                  && getUserData()['Membership ID'] == memberId;

      allow get: if isAuthenticated()
                  && getAccessLevel() >= 2;

      allow list: if isAuthenticated()
                  && getAccessLevel() >= 2
                  && request.query.limit <= QUERY_LIMIT();

      allow create: if isAuthenticated()
                    && getAccessLevel() >= 2;

      allow update: if isAuthenticated()
                    && getAccessLevel() >= 2
                    && getIncomingData()['Membership ID'] == getExistingData()['Membership ID']
                    && getIncomingData()['Graduating Class'] == getExistingData()['Graduating Class']
                    && getIncomingData()['Graduating Year'] == getExistingData()['Graduating Year']
                    && getIncomingData()['updatedAt'] == getExistingData()['updatedAt']
                    && getIncomingData()['createdAt'] == getExistingData()['createdAt'];

      allow delete: if isAuthenticated()
                    && getAccessLevel() >= 3;
    }

    // Events collection contains all the past and upcoming events.
    //
    // GET      If the authenticated user has an access level of 1 (Alumni) or
    //          higher.
    //
    // LIST     If the authenticated user has an access level of 1 (Alumni) or
    //          higher and the query limit not exceeding 10 documents at once.
    //
    // CREATE   If the authenticated user has an access level of 2 (Editor) or
    //          higher.
    //
    // UPDATE   If the authenticated user has an access level of 2 (Editor) or
    //          higher and having the locked document data not being modified.
    //
    // DELETE   If the authenticated user has an access level of 3 (Administrator)
    //          or higher.
    match /events/{eventId} {
      allow get:  if isAuthenticated()
                  && getAccessLevel() >= 1
                  && getUserData()['Membership ID'] != null;

      allow list: if isAuthenticated()
                  && getAccessLevel() >= 1
                  && request.query.limit <= QUERY_LIMIT();

      allow create: if isAuthenticated()
                    && getAccessLevel() >= 2;

      allow update: if isAuthenticated()
                    && getAccessLevel() >= 2
                    && getIncomingData()['Event Code'] == getExistingData()['Event Code']
                    && getIncomingData()['Event Year'] == getExistingData()['Event Year']
                    && getIncomingData()['updatedAt'] == getExistingData()['updatedAt']
                    && getIncomingData()['createdAt'] == getExistingData()['createdAt'];

      allow delete: if isAuthenticated()
                    && getAccessLevel() >= 3;
    }

    // Participations collection contains all records of alumni participation.
    // Used for identifying events participated and collating total VIA hours.
    //
    // GET      If the document belongs to the authenticated user or the
    //          authenticated user has an access level of 2 (Editor) or higher.
    //
    // LIST     If the document belongs to the authenticated user or the
    //          authenticated user has an access level of 2 (Editor) or higher.
    //          And the query limit not exceeding 10 documents at once.
    //
    // CREATE   If the authenticated user has an access level of 2 (Editor) or
    //          higher.
    //
    // UPDATE   If the authenticated user has an access level of 2 (Editor) or
    //          higher and the locked document data not being modified.
    //
    // DELETE   If the authenticated user has an access level of 3 (Administrator)
    //          or higher.
    match /participations/{participationId} {
      allow get:  if isAuthenticated()
                  && getExistingData()['Membership ID'] == getUserData()['Membership ID'];

      allow list: if isAuthenticated()
                  && getExistingData()['Membership ID'] == getUserData()['Membership ID']
                  && request.query.limit <= QUERY_LIMIT();

      allow get:  if isAuthenticated()
                  && getAccessLevel() >= 2;

      allow list: if isAuthenticated()
                  && getAccessLevel() >= 2
                  && request.query.limit <= QUERY_LIMIT();

      allow create: if isAuthenticated()
                    && getAccessLevel() >= 2;

      allow update: if isAuthenticated()
                    && getAccessLevel() >= 2
                    && getIncomingData()['Membership ID'] == getExistingData()['Membership ID']
                    && getIncomingData()['Event Code'] == getExistingData()['Event Code']
                    && getIncomingData()['updatedAt'] == getExistingData()['updatedAt']
                    && getIncomingData()['createdAt'] == getExistingData()['createdAt'];

      allow delete: if isAuthenticated()
                    && getAccessLevel() >= 3;
    }

    match /aggregations/{aggregationId} {
      allow get:  if isAuthenticated()
                  && getAccessLevel() >= 2;

      allow list,
            create,
            update,
            delete: if false;
    }

    function isAuthenticated() {
      return  request.auth != null
              && request.auth.token.email_verified
              && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function hasPermissionLevel(level) {
      let currentUser = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return currentUser['Access Level'] >= level;
    }

    function getExistingData() {
      return resource.data;
    }

    function getIncomingData() {
      return request.resource.data;
    }

    function getUserData() {
    	return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getAccessLevel() {
      return getUserData()['Access Level'];
    }

    function isNotEmpty(value) {
      return value != '';
    }

    function isWithinRange(number, start, end) {
      return (start < number) && (number < end);
    }

    function isWithinQueryLimit() {
      return request.query.limit <= 15;
    }

    function QUERY_LIMIT() {
      return 15;
    }
  }
}
